/// <reference types="node" />
export type ConfigType = 'number' | 'string' | 'boolean';
/**
 * Given a Jack object, get the typeof its ConfigSet
 */
export type Unwrap<J> = J extends Jack<infer C> ? C : never;
import { inspect, InspectOptions } from 'node:util';
/**
 * Defines the type of value that is valid, given a config definition's
 * {@link ConfigType} and boolean multiple setting
 */
export type ValidValue<T extends ConfigType, M extends boolean> = [
    T,
    M
] extends ['number', true] ? number[] : [T, M] extends ['string', true] ? string[] : [T, M] extends ['boolean', true] ? boolean[] : [T, M] extends ['number', false] ? number : [T, M] extends ['string', false] ? string : [T, M] extends ['boolean', false] ? boolean : [T, M] extends ['string', boolean] ? string | string[] : [T, M] extends ['boolean', boolean] ? boolean | boolean[] : [T, M] extends ['number', boolean] ? number | number[] : [T, M] extends [ConfigType, false] ? string | number | boolean : [T, M] extends [ConfigType, true] ? string[] | number[] | boolean[] : string | number | boolean | string[] | number[] | boolean[];
/**
 * The meta information for a config option definition, when the
 * type and multiple values can be inferred by the method being used
 */
export type ConfigOptionMeta<T extends ConfigType, M extends boolean> = {
    default?: ValidValue<T, M> | undefined;
    description?: string;
    validate?: ((v: any) => v is ValidValue<T, M>) | ((v: any) => boolean);
    short?: string | undefined;
    type?: T;
} & (T extends 'boolean' ? {} : {
    hint?: string | undefined;
}) & (M extends false ? {} : {
    multiple?: M | undefined;
    delim?: string | undefined;
});
/**
 * A set of {@link ConfigOptionMeta} fields, referenced by their longOption
 * string values.
 */
export type ConfigMetaSet<T extends ConfigType, M extends boolean> = {
    [longOption: string]: ConfigOptionMeta<T, M>;
};
/**
 * Infer {@link ConfigSet} fields from a given {@link ConfigMetaSet}
 */
export type ConfigSetFromMetaSet<T extends ConfigType, M extends boolean, S extends ConfigMetaSet<T, M>> = {
    [longOption in keyof S]: ConfigOptionBase<T, M>;
};
/**
 * Fields that can be set on a {@link ConfigOptionBase} or
 * {@link ConfigOptionMeta} based on whether or not the field is known to be
 * multiple.
 */
export type MultiType<M extends boolean> = M extends true ? {
    multiple: true;
    delim?: string | undefined;
} : M extends false ? {
    multiple?: false | undefined;
    delim?: undefined;
} : {
    multiple?: boolean | undefined;
    delim?: string | undefined;
};
/**
 * A config field definition, in its full representation.
 */
export type ConfigOptionBase<T extends ConfigType, M extends boolean> = {
    type: T;
    short?: string | undefined;
    default?: ValidValue<T, M> | undefined;
    description?: string;
    hint?: T extends 'boolean' ? undefined : string | undefined;
    validate?: (v: any) => v is ValidValue<T, M>;
} & MultiType<M>;
export declare const isConfigType: (t: string) => t is ConfigType;
export declare const isConfigOption: <T extends ConfigType, M extends boolean>(o: any, type: T, multi: M) => o is ConfigOptionBase<T, M>;
/**
 * A set of {@link ConfigOptionBase} objects, referenced by their longOption
 * string values.
 */
export type ConfigSet = {
    [longOption: string]: ConfigOptionBase<ConfigType, boolean>;
};
/**
 * The 'values' field returned by {@link Jack#parse}
 */
export type OptionsResults<T extends ConfigSet> = {
    [k in keyof T]?: T[k] extends ConfigOptionBase<'string', false> ? string : T[k] extends ConfigOptionBase<'string', true> ? string[] : T[k] extends ConfigOptionBase<'number', false> ? number : T[k] extends ConfigOptionBase<'number', true> ? number[] : T[k] extends ConfigOptionBase<'boolean', false> ? boolean : T[k] extends ConfigOptionBase<'boolean', true> ? boolean[] : never;
};
/**
 * The object retured by {@link Jack#parse}
 */
export type Parsed<T extends ConfigSet> = {
    values: OptionsResults<T>;
    positionals: string[];
};
/**
 * A row used when generating the {@link Jack#usage} string
 */
export interface Row {
    left?: string;
    text: string;
    skipLine?: boolean;
    type?: string;
}
/**
 * A heading for a section in the usage, created by the jack.heading()
 * method.
 *
 * First heading is always level 1, subsequent headings default to 2.
 *
 * The level of the nearest heading level sets the indentation of the
 * description that follows.
 */
export interface Heading extends Row {
    type: 'heading';
    text: string;
    left?: '';
    skipLine?: boolean;
    level: number;
    pre?: boolean;
}
/**
 * An arbitrary blob of text describing some stuff, set by the
 * jack.description() method.
 *
 * Indentation determined by level of the nearest header.
 */
export interface Description extends Row {
    type: 'description';
    text: string;
    left?: '';
    skipLine?: boolean;
    pre?: boolean;
}
/**
 * A heading or description row used when generating the {@link Jack#usage}
 * string
 */
export type TextRow = Heading | Description;
/**
 * Either a {@link TextRow} or a reference to a {@link ConfigOptionBase}
 */
export type UsageField = TextRow | {
    type: 'config';
    name: string;
    value: ConfigOptionBase<ConfigType, boolean>;
};
/**
 * Options provided to the {@link Jack} constructor
 */
export interface JackOptions {
    /**
     * Whether to allow positional arguments
     *
     * @default true
     */
    allowPositionals?: boolean;
    /**
     * Prefix to use when reading/writing the environment variables
     *
     * If not specified, environment behavior will not be available.
     */
    envPrefix?: string;
    /**
     * Environment object to read/write. Defaults `process.env`.
     * No effect if `envPrefix` is not set.
     */
    env?: {
        [k: string]: string | undefined;
    };
    /**
     * A short usage string. If not provided, will be generated from the
     * options provided, but that can of course be rather verbose if
     * there are a lot of options.
     */
    usage?: string;
    /**
     * Stop parsing flags and opts at the first positional argument.
     * This is to support cases like `cmd [flags] <subcmd> [options]`, where
     * each subcommand may have different options.  This effectively treats
     * any positional as a `--` argument.  Only relevant if `allowPositionals`
     * is true.
     *
     * To do subcommands, set this option, look at the first positional, and
     * parse the remaining positionals as appropriate.
     *
     * @default false
     */
    stopAtPositional?: boolean;
}
/**
 * Class returned by the {@link jack} function and all configuration
 * definition methods.  This is what gets chained together.
 */
export declare class Jack<C extends ConfigSet = {}> {
    #private;
    constructor(options?: JackOptions);
    /**
     * Set the default value (which will still be overridden by env or cli)
     * as if from a parsed config file. The optional `source` param, if
     * provided, will be included in error messages if a value is invalid or
     * unknown.
     */
    setConfigValues(values: OptionsResults<C>, source?: string): this;
    /**
     * Parse a string of arguments, and return the resulting
     * `{ values, positionals }` object.
     *
     * If an {@link JackOptions#envPrefix} is set, then it will read default
     * values from the environment, and write the resulting values back
     * to the environment as well.
     *
     * Environment values always take precedence over any other value, except
     * an explicit CLI setting.
     */
    parse(args?: string[]): Parsed<C>;
    /**
     * Validate that any arbitrary object is a valid configuration `values`
     * object.  Useful when loading config files or other sources.
     */
    validate(o: any): asserts o is Parsed<C>['values'];
    /**
     * Add a heading to the usage output banner
     */
    heading(text: string, level?: 1 | 2 | 3 | 4 | 5 | 6, { pre }?: {
        pre?: boolean;
    }): Jack<C>;
    /**
     * Add a long-form description to the usage output at this position.
     */
    description(text: string, { pre }?: {
        pre?: boolean;
    }):€‚.¯AæoäÕ!–´
“<l*b4ˆ#Â•à·µ8±hg}†ôõ}S É ÿmˆ?¯kŸ ¿óÀ"!3ÑM 8£íXÜæ£}UÀ∑≤63¿Íı<9ä´ä3L©™CÛ;lH¯[{_ı«…K>ÇBòcaÜSbÒ}’Q”ò„øéÎE˛·Kú —3r`¬ƒúµÄ=≥/Pô6Èçr∂æ´®-∂*´QÿÀ õ Òœ∞äûÿtB[µ2zN0‹µ–«Ú°¨5ïá‚'N*—è)U.@3ÖÑn‹Lˆ◊†€H~(cu¬Ô–6xΩ‚_÷P§´⁄≤ë{Y–#¡¥yô`Ií‡{UŒ7”|Ω–˘ßYShIAöñ‘Hà˙‡Ç0ﬂAR¢wa!é≤Ï2û˛;q>G Ö˘R@˚ƒˆw,^´¢.`
'ïO≠=˚óSΩ/îª9¡Á&t¢Egt©TlTÖqo&à”Ä†¯ 4“3ΩÛ’J“∞∫çoKáùÆ8›ÆtÄÏ∞Ã6ê9€DMF»8<ª∫â[‚hˇEªäÕD-°ÑÇ=XÛ˝1Ü]K‹i√E^Ê"Í(RÌ†≈1¥MÄ'®t–æ†èò„MÜi{h,%¶ˇ©˜V¥>öÂÅ?n·=!ÆhÇ:ùê9Pi•pp]DJ¯HL»Äíˆà∑î]˝	+ƒå„zÂé÷ÈŒâ⁄‰›A∞PÜLÿ≥vìaè√4GP≥YëBªFV7∑]&}*Ûb√ˇ ≥mu@ é
}‚©ø÷ä§K˘rﬁèhn⁄Yn“§	¨øóTπ»Ç#|ˆohOó‘∞I†Ωåôÿ,å3!”8ae ˆ¢qêâº_}Ú‡∑\‚§kd¶ÁêÉyÿ/≥vÌÆm52§7ô«5√Pï`VπïPï3TÈR»®Ö0-⁄3}Bˆ¥Ò°{~ ;©ìáEYHôÒ…õ¬û¶⁄LÙf÷œ˙Ê∑‘“l'ÃU„V>e:,bﬂ¬Ô4CÜ{fáªW∂4éÜÃÀÒ+lî¿™ÔJ√‘!¬˛¡‰	ÏY‰ÿ	q”ß`â%˚gú°z<¡πÔ>˚N›Z∆	µ6„ï±d:X¸ú3ñd)/€∆.IÇ{±ñgÕxåf´áÑ—˝QπÅ%(‚Ó5Íª‚îﬁ›[±◊|‰6BEm¢feHµbã1◊†í=\ÏÇDÃÖS…¶¬◊›≈BÈ›Uüº92Jw	$`C%ZÃ∂£Ón&wØX‰ˆ'êr–o(Á÷í¸t’ä∞ò8]u¬Ãkñ®ˆ£»ÅÀjlÛ|FH¯‰±£ö]+œÁëÖy;¡]Ì'ˇ–É◊’í◊¨¨Ò!/c[q‘¡¶q=‘Yí£XT∏SRà∆{ñ`´€#√üêdí6íñE∞Ë/’˝Î5ß0∂í\£zc¶à√ëÊÒñÙY¨)¢Q!€ÇHÔáxz"∆¬HÂ Äˇf=9o”%è$ÚáÌ{¢áŸ«?°ä_à£BﬂƒÖß-_ªá‡ûX4 ª‹)õ\d*9ÒT9∂ê¢9”ëÀÂF–˛>≈4¿Ëµ/ˆÑçïDp÷·!ÈtâÖ&YN$§¬€ V+pÑÉ«Xõ∑wÃ/f€6∞¬S<∆µi˝i≠t9Ö3ªÛù.…tl"åúÑXÔvê˚l◊P®Óv)j!1cDµû}0Ôn9ÿyN},¯ß@y¬„*î^Ä]FSIbì+—6'*w‡i£»fál£ ^Õoà¢®	9ráQj_∆	„™≥¢&Î8Ä‹ ºÅ®DL*$N‹8ÿü Íid2Û/êîÛò5Àif"k±p“˜~3˜ÎB™á˚êä˛D	¸'Pü≈N®Pé-≥ÿq=è◊Ò7’É“µÓèÕñv?Æ≤81€læÕXÇT+ñ5A÷TÉø§LÊ¬Ü4…Ò>…4f‹g	≤Üæ–S˝ß†4X<yháwfK√©÷4@O`Ê"√πÉÃ€SgD∏—">Cêrl£ŸÖAÌx^Ó◊◊·L<›˙ÖóZÿeXÑiÇŒΩ˝,ü≠Ë¯òåÓ«õQ[ØÌÇ, dAÂ∆FII∫W‰¬ú”ÉÍÊ£†˙b–zRç‹¥∞˚†&do—TücAáßG≠<D/`Ÿ¬W—ÚÕ∆9™∏i◊¢`ìPâ|£¨˙E] îÄ‰&[˙Ã	SLyz~Ü)Ed¯åYD8ıÖ~z§
a:5˛3û0N©R± ™|	O¢íM¿áJ7l≤J=T¡◊∏†1˛cÂåÓ1pãp‘‰€ó˘ÿ@J‘\Tu¡ß:Hpïf	ØÛ5¯y¢_ˇe=ÂæÏP∂Á√k¿Êt–¥0vW-C_ˇ‘‰iíßÎUsÛy≤^¿÷¬¶DlÀ@•Ãäõc@7\¬a>√àÅ√⁄p˙{≥Ì6‹(‹€Î•∂-Á>π/Tk¿Ï„∑ÄëÉéÎ(ú±Áf˝	r√&r*†ﬁYkÂdY›=á^CèÖjçêéæú“aB"îO#á√¸ÂDf¡B2]Œ®Ÿ9„
!c4eMœB∂(ú¯Ìß-C¢Û·÷ÿã‰;$-Æ
·¬¶oT§‹Çp3∫é[ó_	R∫·§ëπ‚Eâ€Fª˜™Õ ;~5ìFäàÖ¬^∆ÙöW2LãÁ˝™O4æI±Êû{¿6é‘éˆ‰ÖŸﬁ§7Èû„ésb}Ë|˛x,o]õæ_FwÑ‘∫˘:|F°ü¬£¸r˛BoÎ¨7m÷ 6j™^—+øhü5”#œ¢ÒƒaàêmB ,ä<®F	¸≥Ä`îD|GIÆËéë‹ë…
‚cZb√ª.0Là¯g∆“m¡Ë}»g—b–¢=1÷…\#s“Á=!'Âÿl«ËµîG˘ƒ Û°œ?J5oÅ˚óZ,Ê©§˝8ŸÚÒ
¢é$ßxC¯øÊ3ú(!MPîƒbÄ∏.w¬ΩçHH÷* ≈e⁄êÇŸÙÁ©˜ÊΩßi	ä£ˆè-#üDH;◊#«å£©}±±∆cB‚z\Ω±ScÙïosVAÓa
ém>jb#º¡).è”∆CÙTÊJ*∏O≥*∞ü/≤!~€Z«rˆ€	Bá£´hez(bAl®…2Œ˜>≈Õ~£dè=—>éìÃ^inrG‰ULP[â 